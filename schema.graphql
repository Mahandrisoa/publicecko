### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Annonce {
  author: User
  categories: [String!]!
  createdAt: DateTime!
  description: String
  id: Int!
  published: Boolean!
  ratings: Int!
  title: String!
  updatedAt: DateTime!
}

input AnnonceCreateInput {
  categories: [String!]!
  description: String
  ratings: Int
  title: String!
}

type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  createAnnonce(data: AnnonceCreateInput!): Annonce
  createDraft(data: PostCreateInput!): Post
  createVideoGame(data: VideoGameCreateInput!): VideoGame
  deleteAnnonce(id: Int!): Annonce
  deletePost(id: Int!): Post
  deleteVideoGame(id: Int!): VideoGame
  incrementPostViewCount(id: Int!): Post
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  togglePublishAnnonce(id: Int!): Annonce
  togglePublishPost(id: Int!): Post
  togglePublishVideoGame(id: Int!): VideoGame
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Query {
  allAnnonces: [Annonce!]!
  allUsers: [User!]!
  allVideoGames: [VideoGame!]!
  annonceById(id: Int): Annonce
  annonceByUser(userUniqueInput: UserUniqueInput!): [Annonce!]!
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post]
  feed(orderBy: PostOrderByUpdatedAtInput, searchString: String, skip: Int, take: Int): [Post!]!
  me: User
  postById(id: Int): Post
  videoGameById(id: Int): VideoGame
  videoGamesByUser(userUniqueInput: UserUniqueInput!): [VideoGame!]!
}

enum SortOrder {
  asc
  desc
}

type User {
  email: String!
  id: Int!
  name: String
  posts: [Post!]!
  roles: [String!]!
  videoGames: [VideoGame!]!
}

input UserCreateInput {
  email: String!
  name: String
  posts: [PostCreateInput!]
}

input UserUniqueInput {
  email: String
  id: Int
}

type VideoGame {
  author: User
  categories: [String!]!
  description: String
  id: Int!
  published: Boolean!
  release_date: DateTime
  title: String!
}

input VideoGameCreateInput {
  categories: [String!]!
  description: String
  release_date: DateTime
  title: String!
}
